#-- SplayTreeInsertionTests.tstl --

#-- Include necessary libraries and define configurations

@import splay



<@
#-- Define the Splay Tree insertion test class
class SplayTreeInsertionTests(DeepStateTestCase):

    #-- Define test case for inserting into an empty tree
    
    def test_insert_into_empty_tree(self):
        root = None
        key = self.randint(0, 1000)
        root = insert(root, key)
        self.assertEqual(root.key, key, "Root should be equal to the inserted key")

    #-- Define test case for inserting into a non-empty tree
  
    def test_insert_into_non_empty_tree(self):
        root = newNode(100)
        root.left = newNode(50)
        root.right = newNode(200)
        root.left.left = newNode(40)
        root.left.left.left = newNode(30)
        root.left.left.left.left = newNode(20)
        
        key = self.randint(0, 1000)
        root = insert(root, key)
        self.assertTrue(self.key_exists(root, key), "Inserted key should exist in the tree")

    #-- Helper function to check if a key exists in the tree
    def key_exists(self, root, key):
        if root is None:
            return False
        if root.key == key:
            return True
        if root.key < key:
            return self.key_exists(root.right, key)
        return self.key_exists(root.left, key)
@>
