@import splay

# logging -- POST means log after the step executes, the number indicates logging level needed for this logging to appear
log: 1 <splay>.preOrder()
log: POST 1 <splay>.preOrder()


# pools are where TSTL stores state of the SUT; REF indicates a pool that is mirrored by a reference implementation
pool: <int> 4 CONST
pool: < splay> 3 REF

<int> := <[1..20]>

# initialize an empty AVL tree
<avl> := avl.AVLTree()

~<splay>.insert(<int>) => \
   (len(<splay,1>.preOrder()) == pre<(len(<splay,1>.preOrder())>+1) \
   or pre<(<splay,1>.find(<splay,1>))>




# after doing an inorder traversal, we can re-initalize a splay pool
<splay>.preOrder()

~<splay> == ~<splay>

# -> before an action indicates a user-defined guard
len(<splay,1>.preOrder()) > 5 -> <splay>.display()



reference: insert ==> add

property:
    # After inserting a key into the Splay tree, the key should be present in the tree.
    def test_insertion():
        root = None
        for key in keys:
            root = insert(root, key)
            assert key in preOrderKeys(root)

log:
    # Logging the keys present in the preorder traversal of the tree.
    def preOrderKeys(root):
        keys = []
        def preOrderTraversal(node):
            if node:
                keys.append(node.key)
                preOrderTraversal(node.left)
                preOrderTraversal(node.right)
        preOrderTraversal(root)
        return keys
